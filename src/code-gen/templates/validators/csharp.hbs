{{#each dependencies}}
using {{namespace}};
{{/each}}

namespace {{namespace.namespacePascalCase}}
{

    public sealed class {{className.pascalCase}}Validator : AbstractDataValidator<{{className.pascalCase}}>
    {

      public override List<ResultError> Validate({{className.pascalCase}} {{className.camelCase}}, List<ResultError> validationResults)
      {

          Validate{{className.pascalCase}}({{className.camelCase}}, validationResults);

      {{#each fields}}
        {{#if @first}}
          if ({{../className.camelCase}} == null) return;
        {{/if}}
        {{#if type.isDomainClassType}}
        
          if ({{../className.camelCase}}.{{fieldName.pascalCase}}{{#if isCollection}}List{{/if}} != null) Validate{{type.className.pascalCase}}({{../className.camelCase}}, validationResults);
        {{/if}}
      {{/each}}

          return validationResults;
      }

      /// <summary>
      /// Validates <see cref="{{className.pascalCase}}"/> and its details.
      /// </summary>
      /// <param name="{{className.camelCase}}">The object to be validated.</param>
      private static void Validate{{className.pascalCase}}({{className.pascalCase}} {{className.camelCase}}, List<ResultError> validationResults)
      {

          if (ValidateMandatoryField({{className.camelCase}}, validationResults, Resources.VLD_{{className.UPPERCASE}}_MANDATORY, "VLD_{{className.UPPERCASE}}_MANDATORY"))
          {
            {{#each fields}}
              {{#if isNullable}}
                {{#ifCond type.className "==" 'string'}}

              // Validate {{fieldName.pascalCase}}
              if (string.IsNullOrWhiteSpace({{../className.camelCase}}.{{fieldName.pascalCase}}) == false)
              {
                  ValidateExpression({{../className.camelCase}}.{{fieldName.pascalCase}}.Length <= ModelFieldsConstraints.{{../className.pascalCase}}.{{fieldName.pascalCase}}MaxLength, validationResults, Resources.VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_ABOVELIMIT, "VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_ABOVELIMIT");
              }
                {{else}}

              // Validate {{fieldName.pascalCase}}
              if ({{../className.camelCase}}.{{fieldName.pascalCase}} != null)
              {
                  // TODO validate this?
              }
                {{/ifCond}}
              {{else}}
                {{#ifCond type.className "==" 'string'}}

              // {{fieldName.pascalCase}} is mandatory
              if (ValidateMandatoryField({{../className.camelCase}}.{{fieldName.pascalCase}}, validationResults, Resources.VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_MANDATORY, "VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_MANDATORY"))
              {
                  ValidateExpression({{../className.camelCase}}.{{fieldName.pascalCase}}.Length <= ModelFieldsConstraints.{{../className.pascalCase}}.{{fieldName.pascalCase}}MaxLength, validationResults, Resources.VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_ABOVELIMIT, "VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_ABOVELIMIT");
              }
                {{else}}

              // {{fieldName.pascalCase}} is mandatory
              ValidateMandatoryField({{../className.camelCase}}.{{fieldName.pascalCase}}, validationResults, Resources.VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_MANDATORY, "VLD_{{../className.compactUpperCase}}_{{fieldName.compactUpperCase}}_MANDATORY");
                {{/ifCond}}
              {{/if}}
            {{/each}}
          }
      }

{{#each fields}}
    {{#if type.isDomainClassType}}
      private static void Validate{{fieldName.pascalCase}}({{../className.pascalCase}} {{../className.camelCase}}, List<ResultError> validationResults)
      {
          {{#if isNullable}}if({{../className.camelCase}}.{{fieldName.pascalCase}} == null) return null;{{/if}}

          {{type.className.pascalCase}}Validator {{type.className.camelCase}}Validator = new {{type.className.pascalCase}}Validator();

          {{#if isCollection}}
          foreach ({{type.className.pascalCase}} {{fieldName.pascalCase}} in {{../className.camelCase}}.{{fieldName.pascalCase}}List)
          {
              {{fieldName.pascalCase}}.{{../className.pascalCase}}Id = {{../className.camelCase}}.{{../className.pascalCase}}Id;
              {{type.className.camelCase}}Validator.Validate({{fieldName.pascalCase}}, validationResults);
          }
          {{/if}}
      }
    {{/if}}
{{/each}}
    }
}
