{{#each dependencies}}
using {{namespace.namespacePascalCase}};
{{/each}}

namespace {{namespace.namespacePascalCase}}
{

    /// <summary>
    /// Summary description for {{className.pascalCase}}
    /// </summary>
    [TestClass]
    public sealed class {{className.pascalCase}}RepositoryTest
    {
        DatasupertypeConnector _datasupertypeConnector;
        I{{className.pascalCase}}Repository _{{className.camelCase}}Repository;
        {{#each fields}}
            {{#if type.isDomainClassType}}
        I{{type.className.pascalCase}}Repository _{{type.className.camelCase}}Repository;
            {{/if}}
        {{/each}}

        public {{className.pascalCase}}RepositoryTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        #region Properties

        private TestContext testContextInstance;

        /// <summary>
        /// Gets or sets the test context which provides
        /// information about and functionality for the current test run.
        /// </summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #endregion

        #region Additional test attributes

        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //

        [TestInitialize()]
        public void TestInitialize()
        {
            _datasupertypeConnector = new DatasupertypeConnector(Utils.DbConnectionString);
            _datasupertypeConnector.BeginTransaction();
            _{{className.camelCase}}Repository = new {{className.pascalCase}}Repository(_datasupertypeConnector);
            {{#each fields}}
                {{#if type.isDomainClassType}}
            _{{type.className.camelCase}}Repository = new {{type.className.pascalCase}}Repository(_datasupertypeConnector);
                {{/if}}
            {{/each}}
        }

        [TestCleanup()]
        public void TestCleanup()
        {
            _datasupertypeConnector.Rollback();
            _datasupertypeConnector.Dispose();
        }
        #endregion

        #region Tests

        [TestMethod]
        [TestCategory("RepositoryTest")]
        public void InsertTest()
        {
            // Instantiate test doubles
            {{#each fields}}
                {{#if type.isDomainClassType}}
            {{type.className.pascalCase}} {{type.className.camelCase}}Dummy = DummyFactory.Dummy{{type.className.pascalCase}}();
                {{/if}}
            {{/each}}

            {{className.pascalCase}} requestedEntity = DummyFactory.Dummy{{className.pascalCase}}();
            {{className.pascalCase}} retrievedEntity = null;

            {{#each fields}}
                {{#if @first}}
            // Insert aggregated data
                {{/if}}
                {{#if type.isDomainClassType}}
            _{{type.className.camelCase}}Repository.Insert({{type.className.camelCase}}Dummy);
                {{/if}}
            {{/each}}

            {{#each fields}}
                {{#if @first}}
            // Assign aggregated data
                {{/if}}
                {{#if type.isDomainClassType}}
            requestedEntity.{{fieldName.pascalCase}} = {{type.className.camelCase}}Dummy;
                {{/if}}
            {{/each}}

            // Insert tested model
            requestedEntity = _{{className.camelCase}}Repository.Insert(requestedEntity);
            {{#each fields}}{{#if isClassIdentifier~}}
            retrievedEntity = _{{className.camelCase}}Repository.GetById(requestedEntity.{{fieldName.pascalCase}});
            {{~/if}}{{/each}}

            {{#each fields}}{{#if isClassIdentifier~}}
            Assert.AreNotEqual(0, retrievedEntity.{{fieldName.pascalCase}}, "Invalid identifier assigned to {{../className.pascalCase}} on tests.");
            {{~/if}}{{/each}}
          {{#each fields}}
            {{#if type.isDomainClassType}}
              {{#if isNullable}}
                {{#each type.fields}}{{#if isClassIdentifier}}
            // Nullable reference
            Assert.AreEqual(
                requestedEntity.{{../fieldName.pascalCase}} != null ? (long?) requestedEntity.{{../fieldName.pascalCase}}.{{fieldName.pascalCase}} : null,
                retrievedEntity.{{../fieldName.pascalCase}} != null ? (long?) retrievedEntity.{{../fieldName.pascalCase}}.{{fieldName.pascalCase}} : null
            );
                {{/if}}{{/each}}
              {{else}}

            // Non-nullable reference
            Assert.AreEqual(requestedEntity.{{fieldName.pascalCase}}.{{fieldName.pascalCase}}Id, retrievedEntity.{{fieldName.pascalCase}}.{{fieldName.pascalCase}}Id);
              {{/if}}
            {{else}}
            Assert.AreEqual(requestedEntity.{{fieldName.pascalCase}}, retrievedEntity.{{fieldName.pascalCase}});
            {{/if}}
          {{/each}}

          {{#each fields}}{{#if isClassIdentifier}}
            int linesChanged = _{{../className.camelCase}}Repository.Delete(requestedEntity.{{fieldName.pascalCase}});
            Assert.IsTrue(0 < linesChanged, "{{../className.pascalCase}} deletion test failed.");
          {{/if}}{{/each}}
        }

        #endregion
    }
}
